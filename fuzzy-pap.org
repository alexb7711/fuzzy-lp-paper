#+TITLE: Fuzzy Bus Charging Schedule With MILP Constraints
#+DATE: \today
#+EMAIL: A01704744@usu.edu
#+LANGUAGE: en

#+LATEX_CLASS: article

# Theorems/Lemmas/Definition headers
#+LATEX_HEADER: \newtheorem{definition}{Definition}[section]

# =========================================================================================================================
#+begin_export latex
\let\ref\autoref                            % Redifine `\ref` as `\autoref` because lazy
#+end_export
# =========================================================================================================================

* Preliminaries
** Mixed Integer Linear Program
A mixed integer linear programming (MILP) problem is a class of constrained optimization in which one seeks to find a
set of continuous or integer values that maximizes or minimizes an objective function while satisfying a set of
constraints [cite:@chen-2010-applied]. Given a general objective function $J$, decision variables (i.e. variables of
optimization) $x_j \in \mathbb{R}$ and $y_k \in \mathbb{Z}^+$, and input parameters $c_j, d_k, a_{ij}, g_{ik}, b_i \in \mathbb{R}$, a MILP has the
mathematical structure represented in [[eq:milp-structure]] [cite:@chen-2010-applied].

#+name: eq:milp-structure
\begin{equation}
\begin{array}{lll}
\text{Maximize}   & J = \sum_j c_j x_j + \sum_k d_k y_k            &                 \\
\text{subject to} & \sum_j a_{ij} x_j + \sum_k g_{ik} y_k  \le b_i & (i = 1,2,...,m) \\
                  & x_j \ge 0                                      & (j = 1,2,...,n) \\
                  & y_k \in \mathbb{Z^+}0                          & (k = 1,2,...,n) \\
\end{array}
\end{equation}

This formulation of the MILP is also referred to as "crisp". By this it is meant that each variable in the formulation
acts as an injective mapping to its number representation. In other words, every variable has a one-to-one mapping from
variable to value [cite:@kaur-2016-introd-fuzzy].

** Fuzzy Sets Theory
This section introduces the notion of fuzzy numbers and some basic definitions. Concepts from this section are pulled
from [cite:@zimmermann-2001-fuzzy-set;@das-2016-mathem-model;@yaghobi-2014-compar-fuzzy;@bello-2019-fuzzy-activ].

*** Fuzzy Sets
Let's begin with what a fuzzy number is not. A classical (crisp) set is defined as a collection of elements $x \in X$.
Crisp sets are binary, either an element belongs in the set, or it does not [cite:@zimmermann-2001-fuzzy-set]. For a
fuzzy set, what is known as the characteristic function applies various degrees of membership for elements of a given
set [cite:@zimmermann-2001-fuzzy-set].

#+begin_definition
Let $X$ be a collection of objects (often called the universe of discourse [cite:@bello-2019-fuzzy-activ]). If $X$ is denoted
generically by $x$, then a fuzzy set $\tilde{A}$ in $X$ is a set of ordered pairs as shown in [[eq:membership-function]].

#+name: eq:membership-function
\begin{equation}
\tilde{A} = \{(x, \mu_{\tilde{A}}(x))| x\in X\}
\end{equation}

\noindent
$\mu_{\tilde{A}}$ is called the membership function where $\mu_{\tilde{A}}$ is the mapping $\mu_{\tilde{A}} : X \rightarrow
[0,1]$; which assigns a real number to the interval $[0,1]$. The value of $\mu_{\tilde{A}}$ represents the degree of
membership of $x$ in $\tilde{A}$.
#+end_definition

This paper will use fuzzy sets defined on the real numbers $\mathbb{R}$. The membership function describes the shape of
the fuzzy number. As an example, consider the following definition.

#+begin_definition
A fuzzy number that is represented by $\tilde{A} = (a,b,c)$ is said to be triangular if its membership function is
defined as [[eq:triangular-fuzzy-number]].

#+name: eq:triangular-fuzzy-number
\begin{equation}
  \mu_{\tilde{A}}(x) =
  \begin{cases}
    \frac{(x-a)}{(b-a)} & a \le x \le b \\
    \frac{(d-x)}{(d-b)} & c \le x \le d \\
    0                   & \text{otherwise}
  \end{cases}
\end{equation}
#+end_definition

#+begin_definition
The fuzzy set $\tilde{A}$ in $\mathbb{R}$ is normal if $\text{max}_x \mu_{\tilde{A}}(x) = 1$.
#+end_definition

#+begin_definition
A fuzzy set $\tilde{A}$ in $\mathbb{R}$ is convex if and only if the membership function of $\tilde{A}$ satisfies the inequality

\begin{equation*}
\mu_{\tilde{A}}[\beta x_1 + (1-\beta)x_2] \ge \text{min}[\mu_{\tilde{A}}(x_1), \mu_{\tilde{A}}(x_2)]\; \forall x_1, x_2 \in \mathbb{R}\; \beta \in [0,1]
\end{equation*}
#+end_definition

#+begin_definition
A fuzzy number is a normal convex fuzzy set in $\mathbb{R}$.
#+end_definition

#+begin_definition
The triangular fuzzy number $\tilde{A}$ is nonnegative $\iff\; a \ge 0$.
#+end_definition

A more general definition of fuzzy numbers is known as LR fuzzy numbers
[cite:@kaur-2016-introd-fuzzy;@zimmermann-2001-fuzzy-set].

#+begin_definition
A function $L:[0,\infty] \rightarrow [0,1]$ (or $R:[0,\infty] \rightarrow [0,1]$) is said to be reference a function of the fuzzy number if and only
if

1. $L(0) = 1$ (or $R(0) = 1$)
2. $L$ (or $R$) is non-increasing on $[0,\infty)$
#+end_definition

#+begin_definition
A fuzzy number $\tilde{A}$ defined on the set of real numbers, $\mathbb{R}$, denoted as $(m,n,\alpha,\beta)_{LR}$, is said to be an $LR$
flat fuzzy number if its membership function $\mu_{\tilde{A}}(x)$ is defined as

\begin{equation}
\mu_{\tilde{A}}(x) =
\begin{cases}
L(\frac{m-x}{\alpha}) & x \le m, \alpha > 0 \\
R(\frac{m-n}{\beta}) & x \ge m, \beta > 0 \\
1                & m \le x \le n
\end{cases}
\end{equation}
#+end_definition

#+begin_definition
An $LR$ flat fuzzy number $\tilde{A} = (m,n,\alpha,\beta)_{LR}$ is said to be a non-negative $LR$ flat fuzzy number if and only
if $m-\alpha \ge 0$ and is said to be non-positive $LR$ flat fuzzy number if and only if $m - \alpha \le 0$ is a real number.
#+end_definition

#+begin_definition
An $LR$ flat fuzzy number $\tilde{A} = (m,n,\alpha,\beta)_{LR}$ is said to be an unrestricted $LR$ flat fuzzy number if and only
if $m - \alpha$ is a real number.
#+end_definition

*** Fuzzy Arithmetic
If two triangular fuzzy numbers $\tilde{a}_1 = \{a_1, a_2, a_3\}$ and $\tilde{b}_1 = \{b_1, b_2, b_3\}$ are nonnegative
then the following operations are defined in [[eq:fuzzy-arithmetic]].

#+name: eq:fuzzy-arithmetic
\begin{equation}
\begin{array}{lcl}
\tilde{a} \oplus \tilde{b} & = & (a_1 + b_1, a_2 + b_2, a_3 + b_3) \\
\tilde{a} \ominus \tilde{b} & = & (a_1 + b_3, a_2 + b_2, a_3 + b_1) \\
\tilde{a} \otimes \tilde{b} & = & (a_1 b_1, a_2 b_2, a_3 b_3)       \\
\end{array}
\end{equation}

*** Comparing Fuzzy Numbers
Fuzzy numbers do not directly provide a method of ordering nor do they always provide an ordered set like real numbers
[cite:@bello-2019-fuzzy-activ]. There are multiple methods for ordering fuzzy numbers, each coming with advantages and
disadvantages. Different properties have been applied to justify comparison of fuzzy numbers, such as: preference,
rationality, and robustness [cite:@jimenez-2007-linear-progr;@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy]. These
methods are commonly known as ranking functions or ordering functions
[cite:@bello-2019-fuzzy-activ;@das-2016-mathem-model;@kaur-2016-introd-fuzzy]. Commonly, including in this work, the First
index of Yager [cite:@yager-1981-proced-order] is used ([[eq:first-index-yager]]).

#+name: eq:first-index-yager
\begin{equation}
\mathfrak{R}(\tilde{A}) = \frac{\sum_i a_i}{|\tilde{A}|}
\end{equation}

\noindent
where $|\cdot|$ represents the cardinality of the fuzzy number. In words, [[eq:first-index-yager]] is merely the average
of the values in the fuzzy number.

** Fully Fuzzy Linear Programming
Much like the MILP, Fully Fuzzy Linear Programs (FFLP), it is a class of constrained optimization in which one seeks to
find a set of continuous variables that either maximizes or minimizes an objective function, $J$, while satisfying a set
of constraints. The key difference in FFLP is that it is designed to accommodate imprecise information
[cite:@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy]. In FFLP, the parameters and decision variables are fuzzy and
linear. A general FFLP is represented as shown in [[eq:general-fflp]]. The subscripts $\cdot_e$, $\cdot_l$, and $\cdot_g$ indicate to
equality, less than, and greater than constraints, respectively.

#+name: eq:general-fflp
\begin{equation}
\begin{array}{lll}
\text{Maximize}   & J = \sum_j \tilde{C}_j \otimes \tilde{X}_j              &                 \\
\text{subject to} & \sum_j \tilde{a}_{ej} \otimes \tilde{x}_j = \tilde{b}_e &  \forall e = 1,2,3,... \\
                  & \sum_j \tilde{a}_{lj} \otimes \tilde{x}_j \le \tilde{b}_l &  \forall l = 1,2,3,... \\
                  & \sum_j \tilde{a}_{gj} \otimes \tilde{x}_j \ge \tilde{b}_l &  \forall g = 1,2,3,...
\end{array}
\end{equation}

There are many methods of solving FFLP
[cite:@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy;@ebrahimnejad-2016-new-method;@nasseri-2013-fully]; however, the
general strategy is to convert the fuzzy model into a crisp model that can be solved using traditional methods
[cite:@bello-2019-fuzzy-activ]. In [cite:@nasseri-2013-fully;@bello-2019-fuzzy-activ], the method of converting the FFLP
into a crisp MILP is simply done by applying the ranking function to the objective function and breaking the constraints
down into a set of crisp constraints as shown in [[eq:nasseri-solution]]. The constraints are separated according to the
definition of fuzzy set multiplication defined in [[eq:fuzzy-arithmetic]]. The fuzzy number index is represented is the
exponent rather than the subscript to clearly distinguish between the indexed value in the fuzzy number and the
constraint index (i.e. $\tilde{A} = (a^1,a^2,a^3)$). Furthermore, it is assumed that the fuzzy numbers are nonnegative.

#+name: eq:nasseri-solution
\begin{equation}
\begin{array}{lll}
\text{Maximize}   & J = \mathfrak{R}\Big(\sum_j (c_j^1,c_j^2,c_j^3)(x_j^1,x_j^2,x_j^3)\Big) &\\
\text{subject to} & \sum_j a_{ej}^1 x_j^1 = b_e^1 &  \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^1 x_j^1 \le b_l^1 &  \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^1 x_j^1 \ge b_g^1  &  \forall g = 1,2,3,... \\
                  & \sum_j a_{ej}^2 x_j^2 = b_e^2 &  \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^2 x_j^2 \le b_l^2 &  \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^2 x_j^2 \ge b_g^2  &  \forall g = 1,2,3,... \\
                  & \sum_j a_{ej}^3 x_j^3 = b_e^3 &  \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^3 x_j^3 \le b_l^3 &  \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^3 x_j^3 \ge b_g^3  &  \forall g = 1,2,3,... \\
                  & x_j^2 - x_j^1 \ge 0         & x_j^3 - x_j^2 \ge 0 \\
\end{array}
\end{equation}

\noindent
To be more succinct, the FFLP can also equivalently be written as [[eq:nasseri-solution-condensed]].

#+name: eq:nasseri-solution-condensed
\begin{equation}
\begin{array}{lll}
\text{Maximize}   & J = \mathfrak{R}\Big(\sum_j (c_j^1,c_j^2,c_j^3) \otimes (x_j^1,x_j^2,x_j^3)\Big) &\\
\text{subject to} & \sum_j a_{ej}^k x_j^k = b_e^k &  \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^k x_j^k \le b_l^k &  \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^k x_j^k \ge b_g^k  &  \forall g = 1,2,3,... \\
                  & x_j^2 - x_j^1 \ge 0         & x_j^3 - x_j^2 \ge 0 \\
                  & \forall k \in \{1,2,...\}        &                  \\
\end{array}
\end{equation}

Where $k$ has a max value equal to the cardinality to the type of fuzzy number being utilized. This can be further be
elaborated on by rewriting the inequality constraints as equality constraints by introducing slack variables. This is
useful as it represents the formulation in a standard form [cite:@chen-2010-applied;@vanderbei-2020-linear-progr]. It
also has the slightly less useful benefit of (mostly) providing the solver a set of equations called a hyperplane
[cite:@chen-2010-applied].

The given method is called the Kumar and Kaurs method. Generally speaking, it is designed to solve FFLP problems with
inequality constraints having LR flat fuzzy numbers. Given the FFLP [[eq:general-fflp]] and assuming that
$\tilde{x}_j$ is an LR flat fuzzy number, the problem can be reformulated as [[eq:kumar-kaurs-fuzzy]]
[cite:@kaur-2016-introd-fuzzy].

#+name: eq:kumar-kaurs-fuzzy
\begin{equation}
\begin{array}{lll}
\text{Maximize}   & J = \sum_j \tilde{C}_j \otimes \tilde{X}_j              &                                              \\
\text{subject to} & \sum_j \tilde{a}_{ej} \otimes \tilde{x}_j               = \tilde{b}_e & \forall e = 1,2,3,...                \\
                  & \sum_j \tilde{a}_{lj} \otimes \tilde{x}_j \oplus \tilde{S}_l = \tilde{b}_l \oplus \tilde{S'}_l & \forall l = 1,2,3,... \\
                  & \sum_j \tilde{a}_{gj} \otimes \tilde{x}_j \oplus \tilde{S}_g = \tilde{b}_g \oplus \tilde{S'}_g & \forall g = 1,2,3,... \\
                  & \mathfrak{R}(\tilde{S_l}) - \mathfrak{R}(\tilde{S_l'}) \ge 0                                     & \forall l = 1,2,3,...      \\
                  & \mathfrak{R}(\tilde{S_g}) - \mathfrak{R}(\tilde{S_g'}) \le 0                                     & \forall g = 1,2,3,...
\end{array}
\end{equation}

Expanding the set of equation and using the condensed notation in [[eq:nasseri-solution-condensed]] we find
[[eq:kumar-kaurs-crisp]] [cite:@kaur-2016-introd-fuzzy].

#+name: eq:kumar-kaurs-crisp
\begin{equation}
\begin{array}{lll}
\text{Maximize}    & J = \mathfrak{R}\Big(\sum_j (c_j^1,c_j^2,c_j^3) \otimes (x_j^1,x_j^2,x_j^3)\Big) &                       \\
\text{subject to}  & \sum_j a_{ej}^k x_j^k = b_e^k                                   &  \forall e = 1,2,3,...      \\
                   & \sum_j a_{lj}^k x_j^k s_l^k \le s_l^{'k} b_l^k                    &  \forall l = 1,2,3,...      \\
                   & \sum_j a_{gj}^k x_j^k s_g^k \ge s_l^{'k} b_l^k                    &  \forall g = 1,2,3,...      \\
                   & \mathfrak{R}(\tilde{S_l}) - \mathfrak{R}(\tilde{S_l'}) = 0                         & \forall l = 1,2,3,...       \\
                   & \mathfrak{R}(\tilde{S_g}) - \mathfrak{R}(\tilde{S_g'}) = 0                         & \forall g = 1,2,3,...       \\
                   & x_j^2 - x_j^1 \ge 0                                            & x_j^3 - x_j^2 \ge 0     \\
                   & s_j^2 - s_j^1 \ge 0                                            & s_j^3 - s_j^2 \ge 0     \\
                   & s_j^{'2} - s_j^{'1} \ge 0                                      & s_j^{'3} - s_j^{'2} \ge 0 \\
                   & \forall k \in \{1,2,...\}                                            &                       \\
\end{array}
\end{equation}

* The Crisp BAP and PAP
** The Berth Allocation Problem
The BAP models the optimal distribution of container ships to terminals in order to be serviced. The allocation of the
ships depends primarily on the size of the ship and its service time
[cite:@frojan-2015-contin-berth;@imai-2001-dynam-berth;@buhrkal-2011-model-discr]. Most BAP models assume the service
time, size, and preferred terminals to be the input parameters and have delay, deviation from ideal position to be the decision
variables [cite:@frojan-2015-contin-berth;@imai-2001-dynam-berth;@buhrkal-2011-model-discr]. A general formulation for the
BAP of a single quay is described in [[eq:generalbap]]. The variables are as described in [[tab:bapvariables]].

The equations will now be explained. \autoref{subeq:bapobj} is the objective function for the BAP. In this form, it is
attempting to minimize the total time from arrival to service completion. \autoref{subeq:baptemporal} is a big-M
constraint that is used to check if ship $i$'s service time ends before ship $i$. That is $\sigma_{ij}=1$ if $a_j \ge a_i -
s_i$ and $\sigma_{ij} = 0$ otherwise. Similarly, \autoref{subeq:bapspatial} checks if ship $i$ is as below ship $j$. That is
$\psi_{ij} = 1$ if $v_j \ge v_i - s_i$ and $\psi_{ij} = 0$ otherwise. The equations \autoref{subeq:bapvalidpos} -
\autoref{subeq:bappsi} ensure that ship $j$ is either assigned after ship $i$ has finished its service and/or $j$ is
assigned below ship $i$; however, $\sigma_{ij} = \sigma_{ji} \ne 1$ or $\psi_{ij} = \psi_{ji} \ne 1$. That is to say a ship cannot be queued
before and after another or be queued above and below another simultaneously. \autoref{subeq:bapdetach} represents the
time the ship will depart from the berth after being serviced. \autoref{subeq:bapvalidtime} ensures that the arrival
time is less than the starting ervice time and that the starting service time is early enough such that the total time
spent servicing the vessel is less than the time horizon. \autoref{subeq:bapspaces} defines the sets for each decision
variable.

#+name: eq:generalbap
\begin{subequations}
\label{eq:bapconstrs}
\begin{align}
    \text{Minimize }   & \sum_{i=1}^I (e_i - a_i)                                       \label{subeq:bapobj}    \\
    \text{subject to } &a_j - a_i - s_i - (\sigma_{ij} - 1)T \geq 0                         \label{subeq:baptemporal}         \\
                       &v_j - v_i - s_i - (\psi_{ij} - 1)S \geq 0                         \label{subeq:bapspatial}        \\
                       &\sigma_{ij} + \sigma_{ji} + \psi_{ij} + \psi_{ji} \geq 1                       \label{subeq:bapvalidpos}    \\
                       &\sigma_{ij} + \sigma_{ji} \leq 1                                         \label{subeq:bapsigma}        \\
                       &\psi_{ij} + \psi_{ji} \leq 1                                         \label{subeq:bappsi}        \\
                       &s_i + a_i = e_i                                             \label{subeq:bapdetach}       \\
                       &a_i \leq u_i \leq (T - s_i)                                       \label{subeq:bapvalidtime} \\
                       &\sigma_{ij} \in \{0,1\},\;\psi_{ij} \in \{0,1\}\; v_i \in [0 \mbox{ } S ] \label{subeq:bapspaces}
\end{align}
\end{subequations}

#+name: tab:bapvariables
#+caption: Table of variables used for the BAP
| *Variable*         | *Description*                             |
|--------------------+-------------------------------------------|
| Input constants    |                                           |
| $I$                | Number of total ships                     |
|--------------------+-------------------------------------------|
| Input variables    |                                           |
| $a_i$              | Arrival time of ship $i$                  |
| $e_i$              | Time ship $i$ must departs the berth      |
|--------------------+-------------------------------------------|
| Decision Variables |                                           |
| $\psi_{ij}$           | Tracks spatial overlap for ships $(i,j)$  |
| $\sigma_{ij}$           | Tracks temporal overlap for ships $(i,j)$ |
| $s_i$              | Service time for ship $i$                 |
| $u_i$              | Service start time for ship $i$           |
| $v_i$              | Assigned quay for ship $i$                |
|--------------------+-------------------------------------------|

** The Position Allocation Problem (from MILP paper)
The BAP formulation forms the basis of the PAP; however, there are some differences in the way the variables are
interpreted. Using the same formulation as [[eq:generalbap]], the $i^{th}$ visit, the starting service time, $u_i$, is now
the starting charge time, the berth location, $v_i$, is now the charger queue for assignment, and the service time,
$s_i$, is now the time to charge. The PAP utilizes a number of parameters. The following parameters are constants.

- $Q$   : charger length
- $T$   : time horizon
- $N$   : number of incoming vehicles
- $s_i$ : charging time for vehicle $i;\; 1 \leq i \leq N$
- $a_i$ : arrival time of vehicle $i;\; 1 \leq i \leq N$

These constants define the problem bounds. The following list provides a series of decision variables used in the
formulation.

- $u_i$         : starting time of service for vehicle $i;\; 1 \leq i \leq N$
- $v_i$         : charge location $i;\; 1 \leq i \leq N$
- $e_i$         : departure time for vehicle $i;\; 1 \leq i \leq N$
- $\sigma_{ij}$ : binary variable that determines ordering of vehicles $i$ and $j$ in time
- $\psi_{ij}$   : binary variable that determines relative position of vehicles $i$ and $j$ when charging simultaneously

* References
#+bibliographystyle:plain
#+bibliography:citation-database/lit-ref.bib
#+bibliography:citation-database/lib-ref.bib
#+print_bibliography:

#  LocalWords:  Yager MILP FFLP hyperplane BAP
