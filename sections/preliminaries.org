* Preliminaries
:PROPERTIES:
:CUSTOM_ID: sec:fuzzy-preliminaries
:END:

** Mixed Integer Linear Program
A mixed integer linear programming (MILP) problem is a class of constrained optimization in which one seeks to find a
set of continuous or integer values that maximizes or minimizes an objective function while satisfying a set of
constraints [cite:@chen-2010-applied]. Given an objective function $J$, decision variables (i.e. variables of
optimization) $x_j \in \mathbb{R}$ and $y_k \in \mathbb{Z}^+$ where $\mathbb{Z}^+$ denotes the set of non-negative integers, and input parameters $c_j, d_k, a_{ij}, g_{ik}, b_i \in \mathbb{R}$, a MILP has a
mathematical structure [cite:@chen-2010-applied]:

\begin{subequations}
\label{eq:milp-structure}
\begin{align}
&\text{max}        &J = \sum_j c_j x_j + \sum_k d_k y_k&         &               &\label{eq:fuzzy-milp-objective}\\
&\text{subject to} &\sum_j a_{ij} x_j + \sum_k g_{ik} y_k \le b_i&  &(i = 1,2,...,m)& \label{eq:fuzzy-milp-constraint}\\
&                  &x_j \ge 0&                              &(j = 1,2,...,n)& \label{eq:fuzzy-milp-continuous}\\
&                  &y_k \in \mathbb{Z^+}&                   &(k = 1,2,...,n)\text{.}& \label{eq:fuzzy-milp-integer}
&\end{align}
\text{.}
\end{subequations}

The objective function in \ref{eq:fuzzy-milp-objective} comprises two parts, the continuous part, $\sum_j c_j x_j$, and
integer part, $\sum_k d_k y_k$. The decision variable of the first part, $x_j$, is continuous whereas the decision variable
of the second, $y_j$, is integer. Their respective input parameters may be integer or continuous, in the case of this
example they are modeled as continuous. The objective function's utility is to provide a numerical score to a system
(provided that a set of decision variables and input parameters are defined). While an individual score may not have any
intrinsic meaning, it provides a method of ranking different solutions of the same model. The constraint equations
(\ref{eq:fuzzy-milp-constraint} - \ref{eq:fuzzy-milp-integer}) must all be satisfied for the output of an objective
function to have any meaning. Thus, the constraint equations limit the solution space of the decision variables.
\ref{eq:fuzzy-milp-constraint} states that the summation of the products of the respective continuous and integer
decision variables and input parameters must be less than or equal to some value $b_i$. \ref{eq:fuzzy-milp-continuous}
and \ref{eq:fuzzy-milp-integer} state that the decision variables $x_j$ and $y_k$, must be greater than or equal to 0,
respectively.

This formulation of the MILP in \ref{eq:milp-structure} is also referred to as "crisp". By this it is meant that each
variable in the formulation acts as an injective mapping to its number representation. In other words, every variable
has a one-to-one mapping from variable to value [cite:@kaur-2016-introd-fuzzy].

** Fuzzy Sets Theory
:PROPERTIES:
:CUSTOM_ID: sec:fuzzy-set-theory
:END:

This section introduces the notion of fuzzy numbers and some basic definitions. Concepts from this section are
referenced from
[cite:@zimmermann-2001-fuzzy-set;@das-2016-mathem-model;@yaghobi-2014-compar-fuzzy;@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy].

*** Fuzzy Sets
:PROPERTIES:
:CUSTOM_ID: sec:fuzzy-sets
:END:

A sensible method of introducing fuzzy sets is to begin by describing the familiar classic set. A classical (crisp) set
is defined as a collection of elements $x \in X$. Crisp sets are binary, either an element belongs in the set, or it does
not [cite:@zimmermann-2001-fuzzy-set]. For a fuzzy set, what is known as the characteristic function applies various
degrees of membership for elements of a given set [cite:@zimmermann-2001-fuzzy-set]. The membership of a value in a
fuzzy set may differ among other characteristic functions, but their intended purpose remains the same. The
membership function is said to be normalized if $\text{sup}_x \mu_{\tilde{A}}(x) = 1$. As an example,
\ref{fig:lr-fuzzy-characteristic} demonstrates a membership function of an LR flat fuzzy number. For a formal definition, consider
the \ref{def:membership-function}:

#+caption:
#+ATTR_LATEX: :width 0.5\textwidth
#+begin_src latex
  \begin{subfigures}
      %%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      % LR Characteristic
      \begin{figure}[htpb]
      \centering
          \includestandalone{img/lr-flat-fuzzy}
          \caption{Example of a characteristic function for an LR flat fuzzy number. The line segments $[a,b)$ and $(c,d]$
            may be any function that satisfies \ref{def:reference-function}.}
          \label{fig:lr-fuzzy-characteristic}
      \end{figure}
      \hfill

      %%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      % Triangular characteristic
      \begin{figure}[htpb]
      \centering
          \includestandalone{img/trang-characteristic}
          \caption{Example plot of a characteristic function for a triangular fuzzy number.}
          \label{fig:triang-characteristic}
      \end{figure}
  \end{subfigures}
#+end_src

#+begin_definition
\label{def:membership-function}
Let $X$ be a collection of objects (often called the universe of discourse [cite:@bello-2019-fuzzy-activ]). If $X$ is denoted
generically by $x$, then a fuzzy set $\tilde{A}$ in $X$ is a set of ordered pairs as shown in [[eq:membership-function]].

#+name: eq:membership-function
\begin{equation}
\tilde{A} = \{(x, \mu_{\tilde{A}}(x))| x\in X\}
\end{equation}

\noindent
$\mu_{\tilde{A}}$ is called the membership function where $\mu_{\tilde{A}}$ is the mapping $\mu_{\tilde{A}} : X \rightarrow
[0,1]$; which assigns a real number to the interval $[0,1]$. The value of $\mu_{\tilde{A}}$ represents the degree of
membership of $x$ in $\tilde{A}$.
#+end_definition

The shape of a fuzzy number type is defined by membership function. The general definition of fuzzy numbers is known as
LR fuzzy numbers [cite:@kaur-2016-introd-fuzzy;@zimmermann-2001-fuzzy-set]. \ref{def:reference-function} describes the
property that an $L$ and $R$ functions must have. The $L$ function describes the properties that the left portion of the
fuzzy number has, and the $R$ function describes the properties of the right.

#+begin_definition
\label{def:reference-function}
A function $L:[0,\infty) \rightarrow [0,1]$ (or $R:[0,\infty) \rightarrow [0,1]$) is said to be a reference function of the fuzzy number if and only
if

1. $L(0) = 1$ (or $R(0) = 1$)
2. $L$ (or $R$) is non-increasing on $[0,\infty)$
#+end_definition

The definition of an LR fuzzy number may now be developed given the basis of what properties an $L$ (or $R$) function
must have. Consider \ref{def:lr-flat}-\ref{def:lr-non-negative}.

#+begin_definition
\label{def:lr-flat} A fuzzy number $\tilde{A}$ defined on the set of real numbers, $\mathbb{R}$, denoted as the tuple
$(m,n,\alpha,\beta)_{LR}$, is said to be an $LR$ flat fuzzy number if its membership function $\mu_{\tilde{A}}(x)$ is defined as
shown in [[eq:lr-flat-fuzzy]]. Note that the underscore in the tuple, $(\cdot)_{LR}$ is used to indicate that the tuple is for
an LR fuzzy number.

#+name: eq:lr-flat-fuzzy
\begin{equation}
\mu_{\tilde{A}}(x) =
\begin{cases}
L(\frac{m-x}{\alpha}) & x \le m, \alpha > 0 \\
R(\frac{m-n}{\beta}) & x \ge m, \beta > 0 \\
1                & m \le x \le n
\end{cases}
\end{equation}
#+end_definition

#+begin_definition
\label{def:lr-non-negative}
An $LR$ flat fuzzy number $\tilde{A} = (m,n,\alpha,\beta)_{LR}$ is said to be a non-negative $LR$ flat fuzzy number if and only
if $m-\alpha \ge 0$ and is said to be non-positive $LR$ flat fuzzy number if and only if $m - \alpha \le 0$ is a real number.
#+end_definition

A simplification to the LR flat fuzzy number is the triangular fuzzy number, which is what will be utilized in this work
(\ref{fig:triang-characteristic}). The triangular fuzzy numbers shall also be defined over the set of real numbers $\mathbb{R}$. Consider
\ref{def:triangular-fuzzy-number} - \ref{def:triangular-nonnegative}

#+begin_definition
\label{def:triangular-fuzzy-number} A fuzzy number that is represented by $\tilde{A} = (a,b,c)$ is said to be triangular
if its membership function is defined as [[eq:triangular-fuzzy-number]]. \ref{fig:triang-characteristic} depicts a visual
representation of a triangular fuzzy number.

#+name: eq:triangular-fuzzy-number
\begin{equation}
  \mu_{\tilde{A}}(x) =
  \begin{cases}
    \frac{(x-a)}{(b-a)} & a \le x \le b \\
    \frac{(c-x)}{(c-b)} & c \le x \le d \\
    0                   & \text{otherwise}
  \end{cases}
\end{equation}
#+end_definition

#+begin_definition
A fuzzy set $\tilde{A}$ in $\mathbb{R}$ is convex if and only if the membership function of $\tilde{A}$ satisfies the inequality

\begin{equation*}
\mu_{\tilde{A}}[\beta x_1 + (1-\beta)x_2] \ge \text{min}[\mu_{\tilde{A}}(x_1), \mu_{\tilde{A}}(x_2)]\; \forall x_1, x_2 \in \mathbb{R}\; \beta \in [0,1]
\end{equation*}
#+end_definition

#+begin_definition
A fuzzy number is a normal and convex fuzzy set in $\mathbb{R}$.
#+end_definition

#+begin_definition
\label{def:triangular-nonnegative}
The triangular fuzzy number $\tilde{A}$ is nonnegative $\iff\; a \ge 0$.
#+end_definition

*** Fuzzy Arithmetic
:PROPERTIES:
:CUSTOM_ID: sec:fuzzy-arithmetic
:END:

If two triangular fuzzy numbers $\tilde{a}_1 = (a_1, a_2, a_3)$ and $\tilde{b}_1 = (b_1, b_2, b_3)$ are nonnegative
then the following operations are defined in [[eq:fuzzy-arithmetic]].

#+name: eq:fuzzy-arithmetic
\begin{equation}
\begin{array}{lcl}
\tilde{a} \oplus \tilde{b} & = & (a_1 + b_1, a_2 + b_2, a_3 + b_3) \\
\tilde{a} \ominus \tilde{b} & = & (a_1 + b_3, a_2 + b_2, a_3 + b_1) \\
\tilde{a} \otimes \tilde{b} & = & (a_1 b_1, a_2 b_2, a_3 b_3)       \\
\end{array}
\end{equation}

*** Comparing Fuzzy Numbers
:PROPERTIES:
:CUSTOM_ID: sec:comparining-fuzzy-numbers
:END:

Fuzzy numbers do not directly provide a method of ordering nor do they always provide an ordered set like real numbers
[cite:@bello-2019-fuzzy-activ]. There are multiple methods for ordering fuzzy numbers, each coming with advantages and
disadvantages [cite:@mccahon-1990-compar]. Different properties have been applied to justify comparison of fuzzy
numbers, such as: preference, rationality, and robustness
[cite:@jimenez-2007-linear-progr;@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy]. These methods are commonly known as
ranking functions or ordering functions [cite:@bello-2019-fuzzy-activ;@das-2016-mathem-model;@kaur-2016-introd-fuzzy].
Commonly, including in this work, the First index of Yager [cite:@yager-1981-proced-order] is used. Let a fuzzy number
be represented as $\tilde{A} = (a_1,a_2,...)$, then the First index of Yager is defined as [[eq:first-index-yager]]

#+name: eq:first-index-yager
\begin{equation}
\mathfrak{R}(\tilde{A}) = \frac{\sum_i a_i}{|\tilde{A}|}
\end{equation}

\noindent where $|\cdot|$ represents the cardinality of the fuzzy number. In words, [[eq:first-index-yager]] is merely the
average of the values in the fuzzy number. As a result, $A \le B$ when $\mathfrak{R}(\tilde{A}) \le \mathfrak{R}(\tilde{B})$
[cite:@bello-2019-fuzzy-activ].

** Fully Fuzzy Linear Programming
:properties:
:custom_id: sec:fully-fuzzy-linear-programming
:end:

Much like the Linear Programs (LP), Fully Fuzzy Linear Programs (FFLP), it is a class of constrained optimization in
which one seeks to find a set of continuous variables that either maximizes or minimizes an objective function, $J$,
while satisfying a set of constraints. The key difference in FFLP is that it is designed to accommodate imprecise
information [cite:@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy]. In FFLP, the parameters and decision variables are
fuzzy and linear. A general FFLP is represented as shown in [[eq:general-fflp]]. The subscripts $\cdot_e$, $\cdot_l$, and $\cdot_g$
indicate to equality, less than, and greater than constraints, respectively. As an example, the notation
$\tilde{a}_{ej}$ is read as the $e^{\text{th}}$ equality constraint for the $j^{\text{th}}$ value in the fuzzy number
tuple for the fuzzy number $\tilde{a}$. All variables besides $\tilde{X} = (x_1, x_2, ...)$ are input variables.

#+name: eq:general-fflp
\begin{equation}
\begin{array}{lll}
\underset{{\tilde{x}}}{\text{max}} & J = \sum_j \tilde{C}_j \otimes \tilde{X}_j              &                 \\
\text{subject to}                  & \sum_j \tilde{a}_{ej} \otimes \tilde{x}_j = \tilde{b}_e &  \forall e = 1,2,3,... \\
                                   & \sum_j \tilde{a}_{lj} \otimes \tilde{x}_j \le \tilde{b}_l &  \forall l = 1,2,3,... \\
                                   & \sum_j \tilde{a}_{gj} \otimes \tilde{x}_j \ge \tilde{b}_l &  \forall g = 1,2,3,...
\end{array}
\end{equation}

There are many methods of solving FFLP
[cite:@bello-2019-fuzzy-activ;@kaur-2016-introd-fuzzy;@ebrahimnejad-2016-new-method;@nasseri-2013-fully]; however, a
common strategy is to convert the fuzzy model into a crisp model that can be solved using traditional methods
[cite:@bello-2019-fuzzy-activ]. In [cite:@nasseri-2013-fully;@bello-2019-fuzzy-activ], the method of converting the FFLP
into a crisp MILP is simply done by applying the ranking function to the objective function and breaking the constraints
down into a set of crisp constraints as shown in [[eq:nasseri-solution]]. The constraints are separated according to the
definition of fuzzy set multiplication defined in [[eq:fuzzy-arithmetic]]. The fuzzy number index is represented in the
exponent rather than the subscript to clearly distinguish between the indexed value in the fuzzy number and the
constraint index (i.e. $\tilde{A} = (a^1,a^2,a^3)$). Furthermore, it is assumed that the fuzzy numbers are nonnegative.
Although the following equation can be written in terms of general nonnegative LR fuzzy numbers, the parameters and
decision variables are written in terms of nonnegative triangular fuzzy numbers. Consider the equality constraint in
[[eq:general-fflp]]. For each equality constraint there will be a lower, middle, and upper bound to the constraint. That
constitutes three equality constraints. [[eq:nasseri-solution]] expands each constraint.

#+name: eq:nasseri-solution
\begin{equation}
\begin{array}{lclc}
\underset{{\tilde{x}}}{\text{max}}   & J = \mathfrak{R}\Big(\sum_j (c_j^1,c_j^2,c_j^3)(x_j^1,x_j^2,x_j^3)\Big) &\\
\text{subject to} & \sum_j a_{ej}^1 x_j^1 = b_e^1 & & \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^1 x_j^1 \le b_l^1 & & \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^1 x_j^1 \ge b_g^1  & & \forall g = 1,2,3,... \\
                  & \sum_j a_{ej}^2 x_j^2 = b_e^2 & & \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^2 x_j^2 \le b_l^2 & & \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^2 x_j^2 \ge b_g^2  & & \forall g = 1,2,3,... \\
                  & \sum_j a_{ej}^3 x_j^3 = b_e^3 & & \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^3 x_j^3 \le b_l^3 & & \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^3 x_j^3 \ge b_g^3  & & \forall g = 1,2,3,... \\
                  & x_j^2 - x_j^1 \ge 0         & x_j^3 - x_j^2 \ge 0 & \\
\end{array}
\end{equation}

\noindent Note the last constraint is defined to ensure the ordering of the triangular fuzzy number, $x_j^1 \le x_j^2 \le x_j^3$.
To be more succinct, the FFLP can also equivalently be written as [[eq:nasseri-solution-condensed]].

#+name: eq:nasseri-solution-condensed
\begin{equation}
\begin{array}{llc}
\underset{{\tilde{x}}}{\text{max}} & J = \mathfrak{R}\Big(\sum_j (c_j^1,c_j^2,c_j^3) \otimes (x_j^1,x_j^2,x_j^3)\Big) &\\
\text{subject to} & \sum_j a_{ej}^k x_j^k = b_e^k &  \forall e = 1,2,3,... \\
                  & \sum_j a_{lj}^k x_j^k \le b_l^k &  \forall l = 1,2,3,... \\
                  & \sum_j a_{gj}^k x_j^k \ge b_g^k  &  \forall g = 1,2,3,... \\
                  & x_j^2 - x_j^1 \ge 0         & x_j^3 - x_j^2 \ge 0 \\
                  & \forall k \in \{1,2,...\}        &                  \\
\end{array}
\end{equation}

Where $k$ has a max value equal to the cardinality to the type of fuzzy number being utilized. This can be further
elaborated on by rewriting the inequality constraints as equality constraints by introducing slack variables. This is
useful as it represents the formulation in a standard form [cite:@chen-2010-applied;@vanderbei-2020-linear-progr].

The given method is called the Kumar and Kaurs method [cite:@kaur-2016-introd-fuzzy] which is similar in presentation of
the Nassiri method presented in [cite:@bello-2019-fuzzy-activ]. Generally speaking, it is designed to solve FFLP
problems with inequality constraints having LR flat fuzzy numbers. Given the FFLP [[eq:general-fflp]] and assuming that
$\tilde{x}_j$ is an LR flat fuzzy number, the problem can be reformulated as [[eq:kumar-kaurs-fuzzy]]
[cite:@kaur-2016-introd-fuzzy].

#+name: eq:kumar-kaurs-fuzzy
\begin{equation}
\begin{array}{lll}
\underset{{\tilde{x}}}{\text{max}} & J = \sum_j \tilde{C}_j \otimes \tilde{X}_j              &                                              \\
\text{subject to} & \sum_j \tilde{a}_{ej} \otimes \tilde{x}_j               = \tilde{b}_e & \forall e = 1,2,3,...                \\
                  & \sum_j \tilde{a}_{lj} \otimes \tilde{x}_j \oplus \tilde{S}_l = \tilde{b}_l \oplus \tilde{S'}_l & \forall l = 1,2,3,... \\
                  & \sum_j \tilde{a}_{gj} \otimes \tilde{x}_j \oplus \tilde{S}_g = \tilde{b}_g \oplus \tilde{S'}_g & \forall g = 1,2,3,... \\
                  & \mathfrak{R}(\tilde{S_l}) - \mathfrak{R}(\tilde{S_l'}) \ge 0                                     & \forall l = 1,2,3,...      \\
                  & \mathfrak{R}(\tilde{S_g}) - \mathfrak{R}(\tilde{S_g'}) \le 0                                     & \forall g = 1,2,3,...
\end{array}
\end{equation}

Expanding the set of equations and using the condensed notation in [[eq:nasseri-solution-condensed]] we find
[[eq:kumar-kaurs-crisp]] [cite:@kaur-2016-introd-fuzzy].

#+name: eq:kumar-kaurs-crisp
\begin{equation}
\begin{array}{lllc}
\underset{{\tilde{x}}}{\text{max}} & J = \mathfrak{R}\Big(\sum_j (c_j^1,c_j^2,c_j^3) \otimes (x_j^1,x_j^2,x_j^3)\Big) &                             &                                          \\
\text{subject to}  & \sum_j a_{ej}^k x_j^k = b_e^k                                &                                &   \forall e = 1,2,3,...        \\
                   & \sum_j a_{lj}^k x_j^k + s_l^k = s_l^{'k} + b_l^k                 &                                &   \forall l = 1,2,3,...       \\
                   & \sum_j a_{gj}^k x_j^k + s_g^k = s_l^{'k} + b_l^k                 &                                &   \forall g = 1,2,3,...      \\
                   & \mathfrak{R}(\tilde{S_l}) - \mathfrak{R}(\tilde{S_l'}) \ge 0                      &                                &  \forall l = 1,2,3,...          \\
                   & \mathfrak{R}(\tilde{S_g}) - \mathfrak{R}(\tilde{S_g'}) \le 0                      &                                &  \forall g = 1,2,3,...          \\
                   & x_j^2 - x_j^1 \ge 0                                         & x_j^3 - x_j^2 \ge 0              &         \\
                   & \forall k \in \{1,2,...\}                                            &                            &                       \\
\end{array}
\end{equation}

*** Example
:properties:
:custom_id: sec:fully-fuzzy-linear-programming-example
:end:
To demonstrate the process of decomposing an FFLP into its crisp counterpart, a simple example is to be provided.
Consider the following convex non-negative triangular fuzzy FFLP show in [[eq:fflp-example]]. The example is pulled from
[cite:@nasseri-2013-fully].

#+name: eq:fflp-example
\begin{equation}
\begin{array}{ll}
\underset{{\tilde{x}}}{\text{max}} & (1,2,3) \otimes \tilde{x}_1 \oplus (2,3,4) \otimes \tilde{x}_2 \\
\text{subject to}                  & (0,1,2) \otimes \tilde{x}_1 \oplus (1,2,3) \otimes \tilde{x}_2 \le (1,10,27) \\
                                   & (1,2,3) \otimes \tilde{x}_1 \oplus (0,1,2) \otimes \tilde{x}_2 \le (2,11,28)
\end{array}
\end{equation}

Using the method described in [[#sec:fully-fuzzy-linear-programming]], the FFLP can be expanded into the following form
described in [[eq:fflp-example-crisp]]. The objective function is expanded using the First Index of Yager. Each constraint
is then decomposed into three constraints with slack variables appended to the left-hand side and right-hand side of
their respective equation. The constraints for the slack variables are then included to ensure values of the triangular
fuzzy numbers for the slack variables are valid. [[eq:fflp-example-crisp]] is now said to be a crisp representation of
[[eq:fflp-example]] in standard form. Solving the FFLP utilizing the Octave LP module (using both the Nasseri and Kumar
methods to verify the results), the example problem has a solution as displayed in [[tab:fflp-example-solution]].

#+name: eq:fflp-example-crisp
\begin{equation}
\begin{array}{ll}
\underset{x}{\text{max}} & J = (\frac{1+2+3}{3})  (\frac{x_1^1 + x_1^2 + x_1^3}{3}) + (\frac{2,3,4}{3})  (\frac{x_2^1 + x_2^2 + x_2^3}{3}) \\
\text{subject to}        &  0x_1^1 + 1x_2^1 + s_1^1 = 1 + s_1^{1'}                                                                  \\
                         &  1x_1^2 + 2x_2^2 + s_1^2 = 10 + s_1^{2'}                                                                  \\
                         &  2x_1^3 + 3x_2^3 + s_1^3 = 27 + s_1^{3'}                                                                  \\
                         &  1x_1^1 + 0x_2^1 + s_1^1 = 2 + s_1^{1'}                                                                  \\
                         &  2x_1^2 + 1x_2^2 + s_1^2 = 11 + s_1^{2'}                                                                  \\
                         &  3x_1^3 + 2x_2^3 + s_1^3 = 28 + s_1^{3'}                                                                  \\
                         & \mathfrak{R}(\tilde{S_1}) - \mathfrak{R}(\tilde{S_1'}) \ge 0                                                                    \\
                         & \mathfrak{R}(\tilde{S_2}) - \mathfrak{R}(\tilde{S_2'}) \ge 0                                                                    \\
                         & x_j^2 - x_j^1 \ge 0                                                                                        \\
                         & x_j^3 - x_j^2 \ge 0                                                                                        \\
\end{array}
\end{equation}

#+name: tab:fflp-example-solution
#+caption: Solution to the crisp representation of the FFLP.
| $x_1^1$ | $x_1^2$ | $x_1^3$ | $x_2^1$ | $x_2^2$ | $x_2^3$ | $s_1^1$ | $s_1^2$ | $s_1^3$ | $s_1^{1'}$ | $s_1^{2'}$ | $s_1^{3'}$ |
|       2 |       4 |       6 |       1 |       3 |       5 |       0 |       0 |       0 |        0 |        0 |        0 |
